<?xml version="1.0" encoding="UTF-8"?>
<HTMLQuestion xmlns="http://mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2011-11-11/HTMLQuestion.xsd">
  <HTMLContent><![CDATA[
<!DOCTYPE html>
<html>
 <head>
  <meta http-equiv='Content-Type' content='text/html; charset=UTF-8'/>
  <script type='text/javascript' src='https://s3.amazonaws.com/mturk-public/externalHIT_v1.js'></script>
 </head>
 <body>


  <script type="text/javascript">
    var max_num_sentences = 30;

    var sentences = ["${sentence0}", "${sentence1}", "${sentence2}", "${sentence3}", "${sentence4}", "${sentence5}", "${sentence6}", "${sentence7}", "${sentence8}", "${sentence9}", "${sentence10}", "${sentence11}", "${sentence12}", "${sentence13}", "${sentence14}", "${sentence15}", "${sentence16}", "${sentence17}", "${sentence18}", "${sentence19}", "${sentence20}", "${sentence21}", "${sentence22}", "${sentence23}", "${sentence24}", "${sentence25}", "${sentence26}", "${sentence27}", "${sentence28}", "${sentence29}"];

    var result_string = '';
    var delimited_input_sentence = '';

    var submit_url = 'https://www.mturk.com/mturk/externalSubmit';

    var html_str_front = '<!-- Bootstrap v3.0.3 --><link href="https://s3.amazonaws.com/mturk-public/bs30/css/bootstrap.min.css" rel="stylesheet" /><section class="container" id="Other" style="margin-bottom:15px; padding: 10px 10px; font-family: Verdana, Geneva, sans-serif; color:#333333; font-size:0.9em;"><div class="row col-xs-12 col-md-12"><!-- Instructions --><div class="panel panel-primary"><div class="panel-heading"><strong>Instructions</strong></div><div class="panel-body"><p>You will be paid a base rate of $0.01 for starting this HIT, and a bonus of $${cost} for each sentence correctly you correctly unscramble. Below you\'ll find a sentence split into chunks and scrambled. De-scramble the sentence by clicking on the chunks. The first chunk of the correct ordering of the sentence should be clicked first; then the second, and on.</p><ul><li> De-scramble as many sentences as you wish.</li><li>If you make a mistake, click the clear button to start over for that sentence.</li><li>To submit one sentence and go onto the next, click the grey "go on" button.</li><li>When you don\'t want to descramble any more sentences, click the gray submit button (not the MTurk yellow submit button).</li><li><strong>Once you\'ve submitted, do not accept any more of our HITs of the same kind. If you do, you will be rejected.</strong></li></ul></div></div><!-- End Instructions --><!-- Content Body --><section><form name="mturk_form" method="post" id="mturk_form" action="' + submit_url + '"><input type="hidden" value="" name="assignmentId" id="assignmentId"/><input type="hidden" value="" name="unscrambleResult" id="unscramble_result"/><input type="hidden" value="" name="cost" id="cost_field"/><input type="hidden" value="" name="difficulty" id="difficulty_field"/><input class="form-control" id="sentence_field" name="sentence';

    var html_str_back = '" size="120" type="text" />';

    var html_str_footer = '<input onclick="reset_buttons()" id="clear_btn" type="reset" value="clear" />&nbsp; <input onclick="submit_and_next()" type="button" value="go on to next sentence" id="next_button" disabled=true /><p><input type="submit" id="submitButton" value="Submit" /></p></form></section><!-- End Content Body --></div></section><!-- close container --><style type="text/css">fieldset { padding: 10px; background:#fbfbfb; border-radius:5px; margin-bottom:5px; }</style>';

    var buttons = [];

    // last 2 elements in cols are cost and difficulty, so splice them out
    var curr_sentence_index = 0;
    var curr_clicked_count = 0;
    var curr_sentence_arr = [];

    // first time
    write_fresh_page();  

    /******************* 
     * helpers *********
     *******************/
    function write_fresh_page() {

      curr_clicked_count = 0;
      delimited_input_sentence = '';

      // clear the page
      if (document.body) {
        document.body.innerHTML = '';
      }

      // janky janky janky
      var sentence_buttons = sentence_buttons_as_str() + '<br />';
      var html_str = html_str_front + curr_sentence_index + html_str_back + sentence_buttons + html_str_footer;
      document.write(html_str);

      // rewrite everything every time because we are dumb
      document.getElementById('unscramble_result').value = result_string;
      document.getElementById('cost_field').value = ${cost};
      document.getElementById('difficulty_field').value = ${difficulty};

      // don't let worker click buttons while previewing
      check_assignment_id();
    }

    function check_assignment_id() {
      // default turk function: disable submit button (but only the first time)
      turkSetAssignmentID();

      // also disable sentence input buttons
      var assignment_id = turkGetParam('assignmentId', "");
      if (assignment_id == "ASSIGNMENT_ID_NOT_AVAILABLE") { 
         // If we're previewing, disable the sentence buttons
         curr_clicked_count = 0;

         for (var i = 0; i < buttons.length; i++) {
           document.getElementById('btn_' + i).disabled = true;
         }
         
         document.getElementById('next_button').disabled = true;
         document.getElementById('clear_btn').disabled = true;
       }
    }

    function sentence_buttons_as_str() {
      buttons = [];

      var sentence = sentences[curr_sentence_index].replace(/'/g, "&#39;").replace(/"/g, "&#34;");
      curr_sentence_arr = sentence.split(' ||| ');

      curr_sentence_arr = shuffle_array(curr_sentence_arr);

      create_buttons(curr_sentence_arr, buttons);
      return button_arr_to_str(buttons);
    }

    function write_to_page(arr) {
      for (var i = 0; i < arr.length; i++) {
        document.write(arr[i]);
      }
    }

    function button_arr_to_str(arr) {
      var s = '';
      for (var i = 0; i < arr.length; i++) {
        s += arr[i];
      }
      return s;
    }

    function create_buttons(sentence_arr, button_arr) {
      for (var i = 0; i < sentence_arr.length; i++) {
        var value = sentence_arr[i];
        button_arr.push("<input type='button' value='" + value + "' onclick='btn_clicked(this)' id='btn_" + i + "' />");
      }
    }

    /******************* 
     * button functions
     *******************/
    function btn_clicked(element) {
      document.getElementById('sentence_field').value += element.value + ' ';
      delimited_input_sentence += element.value + ' ||| ';

      element.disabled = true;

      curr_clicked_count += 1;

      if (curr_clicked_count == curr_sentence_arr.length) {
        document.getElementById('next_button').disabled = false;
      }
    }

    function reset_buttons() {
      for (var i = 0; i < buttons.length; i++) {
        document.getElementById('btn_' + i).disabled = false;
      }
      curr_clicked_count = 0;
      // reset input sentence we are tracking
      delimited_input_sentence = '';
      document.getElementById('next_button').disabled = true;
    }

    function submit_and_next() {
      var submit_col_name = 'sentence' + curr_sentence_index;
      result_string += delimited_input_sentence + ' $$$ ';

      document.getElementById('unscramble_result').value = result_string;

      curr_sentence_index += 1;

      if (curr_sentence_index >= max_num_sentences) {
        // TODO: we are out of sentences, so submit as done
        document.getElementById('next_button').value = 'no more sentences left';
        document.getElementById('next_button').disabled = true;
        document.getElementById('clear_btn').disabled = true;

      } else {
        write_fresh_page();
      }
    }

    /******************* 
     * utils ***********
     *******************/
    function shuffle_array(array) {
      for (var i = array.length - 1; i > 0; i--) {
        var j = Math.floor(Math.random() * (i + 1));
        var temp = array[i];
        array[i] = array[j];
        array[j] = temp;
      }
      return array;
    }

    // ref: http://stackoverflow.com/a/1293163/2343
    // This will parse a delimited string into an array of
    // arrays. The default delimiter is the comma, but this
    // can be overriden in the second argument.
    function csv_to_array(strData, strDelimiter){
      strDelimiter = (strDelimiter || ",");
      var objPattern = new RegExp(
        (
          "(\\" + strDelimiter + "|\\r?\\n|\\r|^)" +
          "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +
          "([^\"\\" + strDelimiter + "\\r\\n]*))"
        ),
        "gi"
        );
      var arrData = [[]];
      var arrMatches = null;
      while (arrMatches = objPattern.exec( strData )){
        var strMatchedDelimiter = arrMatches[ 1 ];
        if (
          strMatchedDelimiter.length &&
          strMatchedDelimiter !== strDelimiter
          ) {
          arrData.push( [] );
        }
        var strMatchedValue;
        if (arrMatches[ 2 ]){
          strMatchedValue = arrMatches[ 2 ].replace(
            new RegExp( "\"\"", "g" ),
            "\""
          );
        } else {
          strMatchedValue = arrMatches[ 3 ];
        }
        arrData[ arrData.length - 1 ].push( strMatchedValue );
      }
      return( arrData );
    }
  </script>

 </body>
</html>
]]>
  </HTMLContent>
  <FrameHeight>450</FrameHeight>
</HTMLQuestion>