<?xml version="1.0" encoding="UTF-8"?>
<HTMLQuestion xmlns="http://mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2011-11-11/HTMLQuestion.xsd">
  <HTMLContent><![CDATA[
<!DOCTYPE html>
<html>
 <head>
  <meta http-equiv='Content-Type' content='text/html; charset=UTF-8'/>
  <script type='text/javascript' src='https://s3.amazonaws.com/mturk-public/externalHIT_v1.js'></script>
 </head>
 <body>


  <script type="text/javascript">
    var max_num_sentences = 30;

    var sentences = ["${sentence0}", "${sentence1}", "${sentence2}", "${sentence3}", "${sentence4}", "${sentence5}", "${sentence6}", "${sentence7}", "${sentence8}", "${sentence9}", "${sentence10}", "${sentence11}", "${sentence12}", "${sentence13}", "${sentence14}", "${sentence15}", "${sentence16}", "${sentence17}", "${sentence18}", "${sentence19}", "${sentence20}", "${sentence21}", "${sentence22}", "${sentence23}", "${sentence24}", "${sentence25}", "${sentence26}", "${sentence27}", "${sentence28}", "${sentence29}"];

    var result_string = '';
    var delimited_input_sentence = '';

    var submit_url = 'https://workersandbox.mturk.com/mturk/externalSubmit';

    var html_str_front = '<!-- Bootstrap v3.0.3 --><link href="https://s3.amazonaws.com/mturk-public/bs30/css/bootstrap.min.css" rel="stylesheet" /><section class="container" id="Other" style="margin-bottom:15px; padding: 10px 10px; font-family: Verdana, Geneva, sans-serif; color:#333333; font-size:0.9em;"><div class="row col-xs-12 col-md-12"><!-- Instructions --><div class="panel panel-primary"><div class="panel-heading"><strong>Instructions</strong></div><div class="panel-body"><p>INSTRUCTIONS GO HERE You will be paid $${cost} per sentence. Enter instructions for your HIT. It is a good idea to:</p><ul><li>Be as specific as possible in your instructions to eliminate ambiguity. For example, when asking workers to extract texts from an image, ask workers to type the texts exactly as shown in the image including capitalization, spaces and punctuations.</li><li>Include an example of a right answer and a wrong answer. Highlight important information where appropriate.</li><li>Clarify what you expect if a HIT is not doable because of missing data or other problems.</li></ul></div></div><!-- End Instructions --><!-- Content Body --><section><form name="mturk_form" method="post" id="mturk_form" action="' + submit_url + '"><input type="hidden" value="" name="assignmentId" id="assignmentId"/><input type="hidden" value="" name="unscrambleResult" id="unscramble_result"/><input class="form-control" id="sentence_field" name="sentence';

    var html_str_back = '" size="120" type="text" />';

    var html_str_footer = '<input onclick="reset_buttons()" id="clear_btn" type="reset" value="clear" />&nbsp; <input onclick="submit_and_next()" type="button" value="submit and go to next" id="next_button" disabled=true /><p><input type="submit" id="submitButton" value="Submit" /></p></form></section><!-- End Content Body --></div></section><!-- close container --><style type="text/css">fieldset { padding: 10px; background:#fbfbfb; border-radius:5px; margin-bottom:5px; }</style>';

    var buttons = [];

    // last 2 elements in cols are cost and difficulty, so splice them out
    var curr_sentence_index = 0;
    var curr_clicked_count = 0;
    var curr_sentence_arr = [];

    // first time
    write_fresh_page();  

    /******************* 
     * helpers *********
     *******************/
    function write_fresh_page() {

      curr_clicked_count = 0;
      delimited_input_sentence = '';

      // clear the page
      if (document.body) {
        document.body.innerHTML = '';
      }

      // janky janky janky
      var sentence_buttons = sentence_buttons_as_str() + '<br />';
      var html_str = html_str_front + curr_sentence_index + html_str_back + sentence_buttons + html_str_footer;
      document.write(html_str);

      document.getElementById('unscramble_result').value = result_string;

      // don't let worker click buttons while previewing
      check_assignment_id();
    }

    function check_assignment_id() {
      // default turk function: disable submit button (but only the first time)
      turkSetAssignmentID();

      // also disable sentence input buttons
      var assignment_id = turkGetParam('assignmentId', "");
      if (assignment_id == "ASSIGNMENT_ID_NOT_AVAILABLE") { 
         // If we're previewing, disable the sentence buttons
         curr_clicked_count = 0;

         for (var i = 0; i < buttons.length; i++) {
           document.getElementById('btn_' + i).disabled = true;
         }
         
         document.getElementById('next_button').disabled = true;
         document.getElementById('clear_btn').disabled = true;
       }
    }

    function sentence_buttons_as_str() {
      buttons = [];

      //var mturk_var_name = 'sentence' + curr_sentence_index;
      var sentence = sentences[curr_sentence_index].replace(/'/g, "&#39;").replace(/"/g, "&#34;");
      curr_sentence_arr = sentence.split(' ||| ');

      curr_sentence_arr = shuffle_array(curr_sentence_arr);

      create_buttons(curr_sentence_arr, buttons);
      return button_arr_to_str(buttons);
    }

    function write_to_page(arr) {
      for (var i = 0; i < arr.length; i++) {
        document.write(arr[i]);
      }
    }

    function button_arr_to_str(arr) {
      var s = '';
      for (var i = 0; i < arr.length; i++) {
        s += arr[i];
      }
      return s;
    }

    function create_buttons(sentence_arr, button_arr) {
      for (var i = 0; i < sentence_arr.length; i++) {
        var value = sentence_arr[i];
        button_arr.push("<input type='button' value='" + value + "' onclick='btn_clicked(this)' id='btn_" + i + "' />");
      }
    }

    /******************* 
     * button functions
     *******************/
    function btn_clicked(element) {
      document.getElementById('sentence_field').value += element.value + ' ';
      delimited_input_sentence += element.value + ' ||| ';

      element.disabled = true;

      curr_clicked_count += 1;

      if (curr_clicked_count == curr_sentence_arr.length) {
        document.getElementById('next_button').disabled = false;
      }
    }

    function reset_buttons() {
      for (var i = 0; i < buttons.length; i++) {
        document.getElementById('btn_' + i).disabled = false;
      }
      curr_clicked_count = 0;
      document.getElementById('next_button').disabled = true;
    }

    function submit_and_next() {
      // TODO: record data
      var submit_col_name = 'sentence' + curr_sentence_index;
      //var input_sentence = document.getElementById('sentence_field').value;
      result_string += delimited_input_sentence + ' $$$ ';

      //var assignment_id_val = document.getElementById('assignmentId').value;
      //post(submit_url, {submit_col_name: input_sentence.value, assignmentId: assignment_id_val});
      console.log('>>> result string: ' + result_string);
      document.getElementById('unscramble_result').value = result_string;

      curr_sentence_index += 1;

      if (curr_sentence_index >= max_num_sentences) {
        // TODO: we are out of sentences, so submit as done

      } else {
        write_fresh_page();
      }
    }

    /******************* 
     * utils ***********
     *******************/
    // thanks stackoverflow
    // http://stackoverflow.com/questions/133925/javascript-post-request-like-a-form-submit
    function post(path, params, method) {
        method = method || "post"; // Set method to post by default if not specified.

        // The rest of this code assumes you are not using a library.
        // It can be made less wordy if you use one.
        var form = document.createElement("form");
        form.setAttribute("method", method);
        form.setAttribute("action", path);

        for(var key in params) {
            if(params.hasOwnProperty(key)) {
                var hiddenField = document.createElement("input");
                hiddenField.setAttribute("type", "hidden");
                hiddenField.setAttribute("name", key);
                hiddenField.setAttribute("value", params[key]);

                form.appendChild(hiddenField);
             }
        }

        document.body.appendChild(form);
        form.submit();
    }


    function shuffle_array(array) {
      for (var i = array.length - 1; i > 0; i--) {
        var j = Math.floor(Math.random() * (i + 1));
        var temp = array[i];
        array[i] = array[j];
        array[j] = temp;
      }
      return array;
    }

    // ref: http://stackoverflow.com/a/1293163/2343
    // This will parse a delimited string into an array of
    // arrays. The default delimiter is the comma, but this
    // can be overriden in the second argument.
    function csv_to_array(strData, strDelimiter){
      strDelimiter = (strDelimiter || ",");
      var objPattern = new RegExp(
        (
          "(\\" + strDelimiter + "|\\r?\\n|\\r|^)" +
          "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +
          "([^\"\\" + strDelimiter + "\\r\\n]*))"
        ),
        "gi"
        );
      var arrData = [[]];
      var arrMatches = null;
      while (arrMatches = objPattern.exec( strData )){
        var strMatchedDelimiter = arrMatches[ 1 ];
        if (
          strMatchedDelimiter.length &&
          strMatchedDelimiter !== strDelimiter
          ) {
          arrData.push( [] );
        }
        var strMatchedValue;
        if (arrMatches[ 2 ]){
          strMatchedValue = arrMatches[ 2 ].replace(
            new RegExp( "\"\"", "g" ),
            "\""
          );
        } else {
          strMatchedValue = arrMatches[ 3 ];
        }
        arrData[ arrData.length - 1 ].push( strMatchedValue );
      }
      return( arrData );
    }
  </script>

 </body>
</html>
]]>
  </HTMLContent>
  <FrameHeight>450</FrameHeight>
</HTMLQuestion>